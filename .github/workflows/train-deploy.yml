name: Train and Deploy BERT GLUE Model

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run for retraining

env:
  PYTHON_VERSION: '3.10'
  TF_MODELS_VERSION: '2.11.0'
  OPENCV_VERSION: '4.5.5.64'
  NUMPY_VERSION: '1.24.3'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install numpy==1.24.3
            pip install tensorflow==2.11.0
            pip install tensorflow-text==2.11.0
            pip install tensorflow-hub==0.13.0
            pip install tensorflow-datasets==4.8.3
            pip install tensorflow-addons==0.19.0
            pip install tf-models-official==2.11.0 --no-deps
            pip install pytest==7.3.1
            pip install fastapi==0.95.1
            pip install uvicorn==0.22.0
            pip install pydantic==1.10.7
            pip install opencv-python-headless==4.5.5.64
      - name: Run tests
        run: pytest tests/

  train:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        task: ['glue/cola', 'glue/sst2']  # Add more tasks as needed
      fail-fast: false  # Continue with other tasks if one fails
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # First install a compatible NumPy version
          pip install numpy==${{ env.NUMPY_VERSION }}
          # Create a requirements file without tf-models-official
          grep -v "tf-models-official" requirements.txt > requirements_base.txt
          # Install base requirements
          pip install -r requirements_base.txt
          # Install tf-models-official without dependencies
          pip install tf-models-official==${{ env.TF_MODELS_VERSION }} --no-deps
          # Install compatible opencv version
          pip install opencv-python-headless==${{ env.OPENCV_VERSION }}
      - name: Train model
        run: python src/train.py
        env:
          TFDS_NAME: ${{ matrix.task }}
          EPOCHS: 3
          BATCH_SIZE: 32
      - name: Upload model artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.task }}-model
          path: models/

  evaluate:
    needs: train
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        task: ['glue/cola', 'glue/sst2']  # Same tasks as in train job
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Create a requirements file without tf-models-official
          grep -v "tf-models-official" requirements.txt > requirements_base.txt
          # Install base requirements
          pip install -r requirements_base.txt
          # Install tf-models-official without dependencies
          pip install tf-models-official==${{ env.TF_MODELS_VERSION }} --no-deps
          # Install compatible opencv version
          pip install opencv-python-headless==${{ env.OPENCV_VERSION }}
      - name: Download model
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.task }}-model
          path: models/
      - name: Evaluate model
        run: python src/evaluate.py
        env:
          TFDS_NAME: ${{ matrix.task }}

  deploy:
    needs: evaluate
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Download all models
        uses: actions/download-artifact@v3
        with:
          path: models/
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/bert-glue-model:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/bert-glue-model:${{ github.sha }}